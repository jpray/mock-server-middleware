{"version":3,"file":"logger.js","sourceRoot":"","sources":["../src/logger.ts"],"names":[],"mappings":";;AAAA,+BAA8B;AAE9B;;;;;GAKG;AACH,MAAM,KAAK,GAAG,CACZ,OAAkC,EAClC,OAAiC,EACjC,OAAe;IAEf,OAAO,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC,YAAY,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,OAAO,EAAE,CAAC,CAAA;AACrF,CAAC,CAAA;AAaD,MAAM,WAAW,GAAiB;IAChC,KAAK,EAAE,CAAC;IACR,IAAI,EAAE,CAAC;IACP,GAAG,EAAE,CAAC;IACN,IAAI,EAAE,CAAC;IACP,KAAK,EAAE,CAAC;IACR,IAAI,EAAE,EAAE;CACT,CAAA;AAED;IAGE,YAAY,KAAgB;QAFnB,aAAQ,GAAc,IAAI,CAAA;QAGjC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAA;YACtB,MAAM,CAAA;QACR,CAAC;QACD,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAA;IACvB,CAAC;IAED,KAAK,CAAC,OAAe;QACnB,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YAAC,MAAM,CAAA;QAAC,CAAC;QAC9D,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,CAAC,CAAC,CAAC;YAC3C,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;QAC5C,CAAC;IACH,CAAC;IAED,IAAI,CAAC,OAAe;QAClB,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;YAAC,MAAM,CAAA;QAAC,CAAC;QAC7D,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;IACzC,CAAC;IAED,GAAG,CAAC,OAAe;QACjB,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;YAAC,MAAM,CAAA;QAAC,CAAC;QAC5D,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAA;IAC1C,CAAC;IAED,IAAI,CAAC,OAAe;QAClB,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;YAAC,MAAM,CAAA;QAAC,CAAC;QAC7D,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;IAC3C,CAAC;IAED,KAAK,CAAC,OAAe;QACnB,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YAAC,MAAM,CAAA;QAAC,CAAC;QAC9D,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;IACxC,CAAC;CACF;AAED,kBAAe,MAAM,CAAA","sourcesContent":["import * as chalk from 'chalk'\n\n/**\n * @param printFn - A function to print the log, usually `console.log` or `console.error`.\n * @param chalkFn - A function to render the text style of leading label,\n *                  usually a \"Chalk\" function to change text color.\n * @param message - message to print.\n */\nconst print = (\n  printFn: (message: string) => void,\n  chalkFn: (text: string) => string,\n  message: string,\n) => {\n  printFn(`${chalkFn('MDM')}@${new Date().toTimeString().substr(0, 8)} - ${message}`)\n}\n\nexport interface ILogLevelMap {\n  DEBUG: number\n  INFO: number\n  LOG: number\n  WARN: number\n  ERROR: number\n  NONE: number\n}\n\nexport type ILogLevel = keyof ILogLevelMap\n\nconst LogLevelMap: ILogLevelMap = {\n  DEBUG: 1,\n  INFO: 2,\n  LOG: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 10,\n}\n\nclass Logger {\n  readonly logLevel: ILogLevel = null\n\n  constructor(level: ILogLevel) {\n    if (!LogLevelMap[level]) {\n      this.logLevel = 'NONE'\n      return\n    }\n    this.logLevel = level\n  }\n\n  debug(message: string) {\n    if (LogLevelMap[this.logLevel] > LogLevelMap.DEBUG) { return }\n    if (process.env.NODE_ENV === 'development') {\n      print(console.log, chalk.magenta, message)\n    }\n  }\n\n  info(message: string) {\n    if (LogLevelMap[this.logLevel] > LogLevelMap.INFO) { return }\n    print(console.log, chalk.cyan, message)\n  }\n\n  log(message: string) {\n    if (LogLevelMap[this.logLevel] > LogLevelMap.LOG) { return }\n    print(console.log, chalk.green, message)\n  }\n\n  warn(message: string) {\n    if (LogLevelMap[this.logLevel] > LogLevelMap.WARN) { return }\n    print(console.log, chalk.yellow, message)\n  }\n\n  error(message: string) {\n    if (LogLevelMap[this.logLevel] > LogLevelMap.ERROR) { return }\n    print(console.log, chalk.red, message)\n  }\n}\n\nexport default Logger\n"]}