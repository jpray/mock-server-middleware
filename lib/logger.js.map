{"version":3,"file":"logger.js","sourceRoot":"","sources":["../src/logger.ts"],"names":[],"mappings":";;AAAA,+BAA8B;AAE9B;;;;;GAKG;AACH,MAAM,KAAK,GAAG,CACZ,OAAkC,EAClC,OAAiC,EACjC,OAAe;IAEf,OAAO,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC,YAAY,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,OAAO,EAAE,CAAC,CAAA;AACrF,CAAC,CAAA;AAWD,MAAM,WAAW,GAAiB;IAChC,KAAK,EAAE,CAAC;IACR,IAAI,EAAG,CAAC;IACR,GAAG,EAAI,CAAC;IACR,IAAI,EAAG,CAAC;IACR,KAAK,EAAE,CAAC;IACR,IAAI,EAAG,EAAE;CACV,CAAA;AAID,IAAI,QAAQ,GAAc,IAAI,CAAA;AAEjB,QAAA,WAAW,GAAG,CAAC,QAAmB,MAAM;IACnD,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,QAAQ,GAAG,MAAM,CAAA;QACjB,MAAM,CAAA;IACR,CAAC;IACD,QAAQ,GAAG,KAAK,CAAA;AAClB,CAAC,CAAA;AAED,kBAAe;IACb,KAAK,CAAC,OAAe;QACnB,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YAAC,MAAM,CAAA;QAAC,CAAC;QACzD,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,CAAC,CAAC,CAAC;YAC3C,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;QAC5C,CAAC;IACH,CAAC;IAED,IAAI,CAAC,OAAe;QAClB,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;YAAC,MAAM,CAAA;QAAC,CAAC;QACxD,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;IACzC,CAAC;IAED,GAAG,CAAC,OAAe;QACjB,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;YAAC,MAAM,CAAA;QAAC,CAAC;QACvD,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAA;IAC1C,CAAC;IAED,IAAI,CAAC,OAAe;QAClB,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;YAAC,MAAM,CAAA;QAAC,CAAC;QACxD,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;IAC3C,CAAC;IAED,KAAK,CAAC,OAAe;QACnB,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YAAC,MAAM,CAAA;QAAC,CAAC;QACzD,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;IACxC,CAAC;CACF,CAAA","sourcesContent":["import * as chalk from 'chalk'\n\n/**\n * @param printFn - A function to print the log, usually `console.log` or `console.error`.\n * @param chalkFn - A function to render the text style of leading label,\n *                  usually a \"Chalk\" function to change text color.\n * @param message - message to print.\n */\nconst print = (\n  printFn: (message: string) => void,\n  chalkFn: (text: string) => string,\n  message: string,\n) => {\n  printFn(`${chalkFn('MDM')}@${new Date().toTimeString().substr(0, 8)} - ${message}`)\n}\n\nexport interface ILogLevelMap {\n  DEBUG: number\n  INFO: number\n  LOG: number\n  WARN: number\n  ERROR: number\n  NONE: number\n}\n\nconst LogLevelMap: ILogLevelMap = {\n  DEBUG: 1,\n  INFO : 2,\n  LOG  : 2,\n  WARN : 3,\n  ERROR: 4,\n  NONE : 10,\n}\n\nexport type ILogLevel = keyof ILogLevelMap\n\nlet logLevel: ILogLevel = null\n\nexport const setLogLevel = (level: ILogLevel = 'NONE') => {\n  if (!LogLevelMap[level]) {\n    logLevel = 'NONE'\n    return\n  }\n  logLevel = level\n}\n\nexport default {\n  debug(message: string) {\n    if (LogLevelMap[logLevel] > LogLevelMap.DEBUG) { return }\n    if (process.env.NODE_ENV === 'development') {\n      print(console.log, chalk.magenta, message)\n    }\n  },\n\n  info(message: string) {\n    if (LogLevelMap[logLevel] > LogLevelMap.INFO) { return }\n    print(console.log, chalk.cyan, message)\n  },\n\n  log(message: string) {\n    if (LogLevelMap[logLevel] > LogLevelMap.LOG) { return }\n    print(console.log, chalk.green, message)\n  },\n\n  warn(message: string) {\n    if (LogLevelMap[logLevel] > LogLevelMap.WARN) { return }\n    print(console.log, chalk.yellow, message)\n  },\n\n  error(message: string) {\n    if (LogLevelMap[logLevel] > LogLevelMap.ERROR) { return }\n    print(console.log, chalk.red, message)\n  },\n}\n"]}