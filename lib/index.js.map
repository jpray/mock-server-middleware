{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// region Imports\n\nimport { green, yellow, red }              from 'chalk'\nimport { NextHandleFunction }              from 'connect'\nimport { IncomingMessage, ServerResponse } from 'http'\nimport every                             = require('lodash/every')\nimport forEach                           = require('lodash/forEach')\nimport isFunction                        = require('lodash/isFunction')\nimport path                              = require('path')\nconst requireNew                         = require('require-uncached')\n\n// endregion\n\n// region Constants\n\nconst HTTP_NOT_FOUND             = 404\nconst HTTP_INTERNAL_SERVER_ERROR = 500\n\n// endregion\n\n// region Interfaces\n\nexport interface IMockServerConfig {\n  /**\n   * If a request path starts like one of this,\n   * it will be handled by the mock server,\n   * otherwise it will call `next()` to pass the request to the next middleware.\n   */\n  apiPrefixes?: string[]\n  /** Where the API definition files locate.  Related to PWD. */\n  apiDir?: string\n  /** Replace `/[^\\w\\d-]/g` to this when looking for API definition files. */\n  nonChar?: string\n  /** Whether to unify all cases to lower case. */\n  lowerCase?: boolean\n  /** Delay before response, in ms. */\n  ping?: number\n  /** Do not strip query in URL (instead replace '?' with nonChar). */\n  preserveQuery?: boolean\n}\n\nexport interface IJsonApiDefinition {\n  /** HTTP response status code. */\n  code?: number\n  /** Custom HTTP response headers. */\n  headers?: Object\n  /** Response body.  Any valid JSON format can be used. */\n  body: any\n}\n\nexport interface IOverride {\n  definition: any\n  once: boolean\n}\n\ninterface IOverrideStore {\n  [path: string]: IOverride\n}\n\n// endregion\n\n// region Variables / constants initialize\n\nconst overrides: IOverrideStore = {}\n\nconst config: IMockServerConfig = {\n  apiPrefixes  : ['/api/'],\n  apiDir       : 'stubapi',\n  nonChar      : '-',\n  lowerCase    : true,\n  ping         : 0,\n  preserveQuery: false,\n}\n\n// endregion\n\n// region Helper functions\n\nfunction log(message: any, ...optionalParams: any[]): void {\n  if (process.env.NODE_ENV === 'test') { return }\n  // tslint:disable-next-line:no-console\n  console.log(message, ...optionalParams)\n}\n\nexport function composeModulePath({ url, method }: IncomingMessage): string {\n  let modulePath = url\n\n  if (config.preserveQuery !== true) { modulePath = modulePath.split('?')[0] }\n  if (config.lowerCase) { modulePath = modulePath.toLowerCase() }\n  modulePath = modulePath.replace(/[^\\d\\w/]/g, config.nonChar)\n\n  const fullModulePath = path.join(\n    process.cwd(),\n    config.apiDir,\n    method.toLowerCase(),\n    modulePath,\n  )\n\n  return fullModulePath\n}\n\nexport function convertJsonToHandler(json: IJsonApiDefinition): NextHandleFunction {\n  return (req: IncomingMessage, res: ServerResponse, next: Function) => {\n    res.statusCode = json.code || 200\n    forEach(json.headers, (val, name) => {\n      res.setHeader(name, val)\n    })\n    res.end(JSON.stringify(json.body, null, 2))\n  }\n}\n\nexport function loadModule(modulePath: string): NextHandleFunction {\n  try {\n    let handler\n    if (overrides[modulePath] != null) {\n      handler = overrides[modulePath].definition\n      if (overrides[modulePath].once) { delete overrides[modulePath] }\n      log(green('Using Manual Override: ') + modulePath)\n    } else {\n      handler = requireNew(modulePath)\n      log(green('Using API definition: ') + modulePath)\n    }\n    if (isFunction(handler)) { return handler }\n    return convertJsonToHandler(handler)\n  } catch (e) {\n    if (e.code === 'MODULE_NOT_FOUND') {\n      log(yellow('StubAPI not found: ') + modulePath)\n      return convertJsonToHandler({ code: HTTP_NOT_FOUND, body: e })\n    }\n    log(red('Errors in StubAPI: ') + modulePath)\n    log(e)\n    return convertJsonToHandler({ code: HTTP_INTERNAL_SERVER_ERROR, body: e })\n  }\n}\n\n// endregion\n\n// region Main exports\n\nexport function initialize(options: IMockServerConfig): void {\n  Object.assign(config, options)\n}\n\nexport const middleware: NextHandleFunction = function(req, res, next): void {\n  if (every(config.apiPrefixes, (prefix) => req.url.indexOf(prefix) !== 0)) {\n    next()\n    return\n  }\n  const modulePath = composeModulePath(req)\n  const handler = loadModule(modulePath)\n\n  setTimeout(() => {\n    handler(req, res, next)\n  }, config.ping)\n}\n\nexport const server = {\n  once(method: string, url: string, definition: any) {\n    const req = <IncomingMessage> { url, method }\n    overrides[composeModulePath(req)] = {\n      definition,\n      once: true,\n    }\n  },\n\n  on(method: string, url: string, definition: any) {\n    const req = <IncomingMessage> { url, method }\n    overrides[composeModulePath(req)] = {\n      definition,\n      once: false,\n    }\n  },\n\n  off(method?: string, url?: string) {\n    if (method != null && url != null) {\n      const req = <IncomingMessage> { url, method }\n      delete overrides[composeModulePath(req)]\n      return\n    }\n\n    if (method == null && url == null) {\n      for (const key in overrides) {\n        if (overrides.hasOwnProperty(key)) { delete overrides[key] }\n      }\n      return\n    }\n\n    throw new Error('Params of msm.server.off() should either be both given or be neither given. '\n      + 'But now only one is given.  This usually indicates a problem in code.')\n  },\n}\n// endregion\n"]}