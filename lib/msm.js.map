{"version":3,"file":"msm.js","sourceRoot":"","sources":["../src/msm.ts"],"names":[],"mappings":"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","sourcesContent":["// region - Imports\n\nimport { NextHandleFunction } from 'connect'\nimport { IncomingMessage, ServerResponse } from 'http'\nimport * as _ from 'lodash'\nimport * as url from 'url'\nimport Logger, { ILogLevel } from './logger'\nimport MSMServer from './server'\nimport { composeModulePath, loadModule } from './utils'\n\nconst requireNew = require('require-uncached')\n\n// endregion\n\n// region - Interfaces\n\nexport interface IMockServerConfig {\n  /**\n   * If a request path starts like one of this,\n   * it will be handled by the mock server,\n   * otherwise it will call `next()` to pass the request to the next middleware.\n   */\n  apiPrefixes?: string[]\n  /** Where the API definition files locate.  Related to PWD. */\n  apiDir?: string\n  /** Replace `/[^\\w\\d-]/g` to this when looking for API definition files. */\n  nonChar?: string\n  /** Whether to unify all cases to lower case. */\n  lowerCase?: boolean\n  /** Delay before response, in ms. */\n  ping?: number\n  /** Do not strip query in URL (instead replace '?' with nonChar). */\n  preserveQuery?: boolean\n  /**\n   * Log level. 'INFO' & 'LOG' is the same. Default is 'NONE'.\n   */\n  logLevel?: ILogLevel\n}\n\nexport interface IJsonApiDefinition {\n  /** HTTP response status code. */\n  code?: number\n  /** Custom HTTP response headers. */\n  headers?: object\n  /** Response body.  Any valid JSON format can be used. */\n  body: any\n}\n\ninterface IRequestWithOptionalBody extends IncomingMessage {\n  body?: object\n}\n\nexport { IRequestWithOptionalBody as IRequest, ServerResponse as IResponse, NextHandleFunction as INextFn }\n\nexport type IMSMMiddleware\n  = (request: IRequestWithOptionalBody, response: ServerResponse, next: () => any) => void\n\n// endregion\n\n// region - Main exports\n\nexport default class MSM implements IMockServerConfig {\n  readonly apiPrefixes: string[] = ['/api/']\n  readonly apiDir: string = 'stubapi'\n  readonly nonChar: string = '-'\n  readonly lowerCase: boolean = false\n  readonly ping: number = 0\n  readonly preserveQuery: boolean = false\n  readonly logLevel: ILogLevel = 'NONE' as 'NONE'\n  readonly logger: Logger = null\n  readonly server: MSMServer = null\n\n  constructor(options?: IMockServerConfig) {\n    if (options != null) {\n      if (!_.isEmpty(options.apiPrefixes)) { this.apiPrefixes = options.apiPrefixes }\n      if (_.isString(options.apiDir)) { this.apiDir = options.apiDir }\n      if (_.isString(options.nonChar)) { this.nonChar = options.nonChar }\n      if (_.isBoolean(options.lowerCase)) { this.lowerCase = options.lowerCase }\n      if (_.isFinite(options.ping)) { this.ping = options.ping }\n      if (_.isBoolean(options.preserveQuery)) { this.preserveQuery = options.preserveQuery }\n      if (_.isString(options.logLevel)) { this.logLevel = options.logLevel }\n    }\n    this.logger = new Logger(this.logLevel)\n    this.server = new MSMServer(this)\n    this.logger.warn('MSM initialized')\n    this.logger.log(`apiPrefixes: ${this.apiPrefixes}`)\n    this.logger.log(`apiDir: ${this.apiDir}`)\n    this.logger.log(`nonChar: ${this.nonChar}`)\n    this.logger.log(`lowerCase: ${this.lowerCase}`)\n    this.logger.log(`ping: ${this.ping}`)\n    this.logger.log(`preserveQuery: ${this.preserveQuery}`)\n    this.logger.log(`logLevel: ${this.logLevel}`)\n  }\n\n  middleware(): IMSMMiddleware {\n    return (req: IRequestWithOptionalBody, res: ServerResponse, next: () => any) => {\n      if (_.every(this.apiPrefixes, (prefix) => req.url.indexOf(prefix) !== 0)) {\n        this.logger.debug(`NOT HIT: ${req.method} ${req.url}`)\n        next()\n        return\n      }\n\n      this.logger.info(`${req.method} ${req.url}`)\n\n      this.server.logCall(\n        req.method.toLocaleLowerCase(),\n        url.parse(req.url, true),\n        req.body != null ? req.body : void 0,\n      )\n\n      const modulePath = composeModulePath(req, this)\n      const handler = loadModule(modulePath, this.server.overrides, this.logger)\n\n      setTimeout(() => {\n        handler(req, res, next)\n      }, this.ping)\n    }\n  }\n}\n// endregion\n"]}