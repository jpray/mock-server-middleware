{"version":3,"file":"msm.js","sourceRoot":"","sources":["../src/msm.ts"],"names":[],"mappings":"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","sourcesContent":["// region - Imports\n\nimport { NextHandleFunction } from 'connect'\nimport { IncomingMessage, ServerResponse } from 'http'\nimport * as _ from 'lodash'\nimport * as url from 'url'\nimport Logger, { ILogLevel } from './logger'\nimport MSMServer from './server'\nimport { composeModulePath, loadModule } from './utils'\n\nconst requireNew = require('require-uncached')\n\n// endregion\n\n// region - Interfaces\n\nexport interface IMockServerConfig {\n  /**\n   * If a request path starts like one of this,\n   * it will be handled by the mock server,\n   * otherwise it will call `next()` to pass the request to the next middleware.\n   */\n  apiPrefixes?: string[]\n  /** Where the API definition files locate.  Related to PWD. */\n  apiDir?: string\n  /** Replace `/[^\\w\\d-]/g` to this when looking for API definition files. */\n  nonChar?: string\n  /** Whether to unify all cases to lower case. */\n  lowerCase?: boolean\n  /** Delay before response, in ms. */\n  ping?: number\n  /** Do not strip query in URL (instead replace '?' with nonChar). */\n  preserveQuery?: boolean\n  /**\n   * Log level. 'INFO' & 'LOG' is the same. Default is 'NONE'.\n   */\n  logLevel?: ILogLevel\n}\n\nexport interface IJsonApiDefinition {\n  /** HTTP response status code. */\n  code?: number\n  /** Custom HTTP response headers. */\n  headers?: object\n  /** Response body.  Any valid JSON format can be used. */\n  body: any\n}\n\ninterface IRequestWithOptionalBody extends IncomingMessage {\n  body?: object\n}\n\nexport { IRequestWithOptionalBody as IRequest, ServerResponse as IResponse, NextHandleFunction as INextFn }\n\n// endregion\n\n// region - Main exports\n\nexport default class MSM implements IMockServerConfig {\n  readonly apiPrefixes: string[] = ['/api/']\n  readonly apiDir: string = 'stubapi'\n  readonly nonChar: string = '-'\n  readonly lowerCase: boolean = false\n  readonly ping: number = 0\n  readonly preserveQuery: boolean = false\n  readonly logLevel: ILogLevel = 'NONE' as 'NONE'\n  readonly logger: Logger = null\n  readonly server: MSMServer = null\n\n  constructor(options?: IMockServerConfig) {\n    if (options != null) {\n      if (!_.isEmpty(options.apiPrefixes)) { this.apiPrefixes = options.apiPrefixes }\n      if (_.isString(options.apiDir)) { this.apiDir = options.apiDir }\n      if (_.isString(options.nonChar)) { this.nonChar = options.nonChar }\n      if (_.isBoolean(options.lowerCase)) { this.lowerCase = options.lowerCase }\n      if (_.isFinite(options.ping)) { this.ping = options.ping }\n      if (_.isBoolean(options.preserveQuery)) { this.preserveQuery = options.preserveQuery }\n      if (_.isString(options.logLevel)) { this.logLevel = options.logLevel }\n    }\n    this.logger = new Logger(this.logLevel)\n    this.server = new MSMServer(this)\n  }\n\n  middleware(req: IRequestWithOptionalBody, res: ServerResponse, next: () => any): void {\n    if (_.every(this.apiPrefixes, (prefix) => req.url.indexOf(prefix) !== 0)) {\n      next()\n      return\n    }\n\n    this.server.logCall(\n      req.method.toLocaleLowerCase(),\n      url.parse(req.url, true),\n      req.body != null ? req.body : void 0,\n    )\n\n    const modulePath = composeModulePath(req, this)\n    const handler = loadModule(modulePath, this.server.overrides, this.logger)\n\n    setTimeout(() => {\n      handler(req, res, next)\n    }, this.ping)\n  }\n}\n// endregion\n"]}